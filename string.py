# одинарные и двойные кавычки не имеют разницы


# В таком случае можно использовать двойные кавычки, либо экранировать
print('I\'m Ruslan')

# Обратный слэш экранируется обратным слэшем, либо через символ r
print('C:\\Ruslan\\Python')
print(r'C:\Ruslan\Python')

# Перенос строки
print('I\'m Ruslan\nI\'m programmer')

# также можно строку можно создать через конструктор str
print(str("asd"), type(str(1)))

# Строка индексируемая, можно получить по индексу любой символ
# Присвоить индексу новое значение не получится, будет ошибка
print(str('asd')[0])

# Если мы хотим взять подстроку с определенного символа, то после индекса указываем :, после которого указывается
# при необходимости конечный символ
print(str('test')[1:3])

# :: - означает шаг... каждый n-ый символ, начиная с первого
print(str('Много много букав')[::3])

# склеивание строчек происходит через оператор +
print("1" + "2")

# либо через синтаксис формата
first = 'Первая переменная'
second = 'затем вторая'
print('%s %s' % (first, second))

# длина строки
print(len('test'))

# количество вхождений символа
print(first.count('е'))

# Первый символ в верхний регистр - остальные в нижний
print(second.capitalize())
upper_second = second.upper()
# Все символы в верхний регистр... каждая из этих функций возвращает новую строку
print(upper_second)
print(upper_second.isupper())
print(upper_second.islower())
# Ищет первый необходимый символ, возвращает индекс, если символ не найден - возвращает -1
print(upper_second.find('Е', 0, 10))
# Проверяет на наличие только чисел и букв
print('123фывыф!"№'.isalnum())
# только буквы
print('asd'.isalpha())
# проверка строки на наличие ТОЛЬКО пробелов
print('   '.isspace())
print(' s  s'.strip())


# форматирование строк
print("Hello! My name is {}, i'm {}".format("Ruslan", "Front-End developer"))
pi = 3.1415
print("Pi equal {pi:1.2f}".format(pi=pi))
name = "Ruslan"
print(f"{name}")